considered.variables <- c("LIP","UNEMP","LCPI","LPCOM","FFR","NBR","TTR","M1")
y <- as.matrix(USmonthly[considered.variables])
res.svar.ordering <- svar.ordering(y,p=3,
posit.of.shock = 5,
nb.periods.IRF = 20,
nb.bootstrap.replications = 100, # This is used in the parametric bootstrap only
confidence.interval = 0.90, # expressed in pp.
indic.plot = 1 # Plots are displayed if = 1.
)
library(AEC)
par(mfrow=c(1,2))
plot(BQ$Date,BQ$Dgdp,type="l",main="GDP quarterly growth rate",xlab="",ylab="",lwd=2)
plot(BQ$Date,BQ$unemp,type="l",ylim=c(-3,6),main="Unemployment rate (gap)",xlab="",ylab="",lwd=2)
library(vars)
y <- BQ[,2:3]
est.VAR <- VAR(y,p=8)
Omega <- var(residuals(est.VAR))
# Compute (Id - Phi)^{-1}:
Phi <- Acoef(est.VAR)
PHI <- make.PHI(Phi)
sum.PHI.k <- solve(diag(dim(PHI)[1]) - PHI)[1:2,1:2]
loss <- function(param){
B <- matrix(param,2,2)
X <- Omega - B %*% t(B)
Theta <- sum.PHI.k[1:2,1:2] %*% B
loss <- 10000 * ( X[1,1]^2 + X[2,1]^2 + X[2,2]^2 + Theta[1,1]^2 )
return(loss)
}
res.opt <- optim(c(1,0,0,1),loss,method="BFGS",hessian=FALSE)
print(res.opt$par)
library(AEC);library(vars);library(Matrix)
data("USmonthly")
First.date <- "1965-01-01"
Last.date <- "1995-06-01"
indic.first <- which(USmonthly$DATES==First.date)
indic.last  <- which(USmonthly$DATES==Last.date)
USmonthly   <- USmonthly[indic.first:indic.last,]
considered.variables <- c("LIP","UNEMP","LCPI","LPCOM","FFR","NBR","TTR","M1")
n <- length(considered.variables)
y <- as.matrix(USmonthly[considered.variables])
sign.restrictions <- list()
horizon <- list()
#Define sign restrictions and horizon for restrictions
for(i in 1:n){
sign.restrictions[[i]] <- matrix(0,n,n)
horizon[[i]] <- 1
}
sign.restrictions[[1]][1,3] <- 1
sign.restrictions[[1]][2,5] <- -1
sign.restrictions[[1]][3,6] <- 1
horizon[[1]] <- 1:5
res.svar.signs <- svar.signs(y,p=3,
nb.shocks = 1, #number of identified shocks
nb.periods.IRF = 20,
bootstrap.replications = 1, # = 0 if no bootstrap
confidence.interval = 0.80, # expressed in pp.
indic.plot = 1, # Plots are displayed if = 1.
nb.draws = 10000, # number of draws
sign.restrictions,
horizon,
recursive =1 #  =0 <- draw Q directly, =1 <- draw q recursively
)
nb.rotations <- res.svar.signs$xx
theta.angle <- pi/3
Q <- matrix(c(cos(theta.angle),sin(theta.angle),-sin(theta.angle),cos(theta.angle)),2,2)
#nb.sim <- 10^4
nb.sim <- 10^2
distri.1 <- list(type=c("gaussian"),name="Panel (a) Gaussian",name.4.table="Gaussian")
distri.2 <- list(type=c("mixt.gaussian"),mu=0,sigma=5,p=.03,name="Panel (b) Mixture of Gaussian",name.4.table="Mixture of Gaussian")
distri.3 <- list(type=c("student"),df=c(5),name="Panel (c) Student (df: 5)",name.4.table="Student (df: 5)")
distri.4 <- list(type=c("student"),df=c(10),name="Panel (d) Student (df: 10)",name.4.table="Student (df: 10)")
x.lim <- c(-7,7)
y.lim <- c(-5,5)
nb.points <- 100
x.points <- seq(x.lim[1],x.lim[2],length.out=nb.points)
y.points <- x.points
all.x <- c(matrix(x.points,nb.points,nb.points))
all.y <- c(t(matrix(x.points,nb.points,nb.points)))
eps <- cbind(all.x,all.y)
par(plt=c(.25,.9,.25,.8))
eta.1 <- simul.distri(distri.1,nb.sim)
eta.2 <- simul.distri(distri.1,nb.sim)
epsilon.C <- cbind(eta.1,eta.2) %*% t(C)
epsilon.CQ <- cbind(eta.1,eta.2) %*% t(C %*% Q)
Model$distri <- list(type=c("gaussian","gaussian"),df=c(NaN,NaN))
par(mfrow=c(1,2))
plot(epsilon.C[,1],epsilon.C[,2],pch=19,
xlim=x.lim,ylim=y.lim,col="#00000044",
xlab=expression(epsilon[1]),
ylab=expression(epsilon[2]),cex.lab=1.6,cex.main=1.6,
main=expression(paste("Distribution of ",epsilon[t]," = ",B,eta[t],sep="")))
z <- matrix(exp(g(eps,Model)),nb.points,nb.points)
theta.angle <- pi/3
Q <- matrix(c(cos(theta.angle),sin(theta.angle),-sin(theta.angle),cos(theta.angle)),2,2)
#nb.sim <- 10^4
nb.sim <- 10^2
distri.1 <- list(type=c("gaussian"),name="Panel (a) Gaussian",name.4.table="Gaussian")
distri.2 <- list(type=c("mixt.gaussian"),mu=0,sigma=5,p=.03,name="Panel (b) Mixture of Gaussian",name.4.table="Mixture of Gaussian")
distri.3 <- list(type=c("student"),df=c(5),name="Panel (c) Student (df: 5)",name.4.table="Student (df: 5)")
distri.4 <- list(type=c("student"),df=c(10),name="Panel (d) Student (df: 10)",name.4.table="Student (df: 10)")
x.lim <- c(-7,7)
y.lim <- c(-5,5)
nb.points <- 100
x.points <- seq(x.lim[1],x.lim[2],length.out=nb.points)
y.points <- x.points
all.x <- c(matrix(x.points,nb.points,nb.points))
all.y <- c(t(matrix(x.points,nb.points,nb.points)))
eps <- cbind(all.x,all.y)
par(plt=c(.25,.9,.25,.8))
eta.1 <- simul.distri(distri.1,nb.sim)
eta.2 <- simul.distri(distri.1,nb.sim)
epsilon.C <- cbind(eta.1,eta.2) %*% t(C)
epsilon.CQ <- cbind(eta.1,eta.2) %*% t(C %*% Q)
Model$distri <- list(type=c("gaussian","gaussian"),df=c(NaN,NaN))
par(mfrow=c(1,2))
plot(epsilon.C[,1],epsilon.C[,2],pch=19,
xlim=x.lim,ylim=y.lim,col="#00000044",
xlab=expression(epsilon[1]),
ylab=expression(epsilon[2]),cex.lab=1.6,cex.main=1.6,
main=expression(paste("Distribution of ",epsilon[t]," = ",B,eta[t],sep="")))
z <- matrix(exp(g(eps,Model)),nb.points,nb.points)
library(AEC)
nb.sim <- 12
Phi <- array(NaN,c(n,n,1))
Phi[,,1] <- matrix(c(.5,-.4,.3,.7),2,2)
p <- dim(Phi)[3]
Theta <- array(NaN,c(n,n,1))
Theta[,,1] <- 0*(-matrix(c(2,1,0,.5),2,2))
q <- dim(Theta)[3]
Mu <- rep(0,n)
C <- matrix(c(1,-1,2,1),2,2)
Model <- list(
Mu = Mu,
Phi = Phi,
Theta = Theta,
C = C,
distri = distri
)
Y0 <- rep(0,n)
eta0 <- c(1,0)
res.sim.1C <- simul.VARMA(Model,nb.sim,Y0,eta0,indic.IRF=1)
library(AEC)
nb.sim <- 12
Phi <- array(NaN,c(n,n,1))
Phi[,,1] <- matrix(c(.5,-.4,.3,.7),2,2)
p <- dim(Phi)[3]
Theta <- array(NaN,c(n,n,1))
Theta[,,1] <- 0*(-matrix(c(2,1,0,.5),2,2))
q <- dim(Theta)[3]
Mu <- rep(0,n)
C <- matrix(c(1,-1,2,1),2,2)
Model <- list(
Mu = Mu,
Phi = Phi,
Theta = Theta,
C = C,
distri = distri
)
Y0 <- rep(0,n)
eta0 <- c(1,0)
res.sim.1C <- simul.VARMA(Model,nb.sim,Y0,eta0,indic.IRF=1)
library(AEC)
nb.sim <- 12
Phi <- array(NaN,c(n,n,1))
Phi[,,1] <- matrix(c(.5,-.4,.3,.7),2,2)
p <- dim(Phi)[3]
Theta <- array(NaN,c(n,n,1))
Theta[,,1] <- 0*(-matrix(c(2,1,0,.5),2,2))
q <- dim(Theta)[3]
Mu <- rep(0,n)
C <- matrix(c(1,-1,2,1),2,2)
Model <- list(
Mu = Mu,
Phi = Phi,
Theta = Theta,
C = C,
distri = distri
)
Y0 <- rep(0,n)
eta0 <- c(1,0)
res.sim.1C <- simul.VARMA(Model,nb.sim,Y0,eta0,indic.IRF=1)
eta0
Model$C
library(AEC)
nb.sim <- 12
Phi <- array(NaN,c(n,n,1))
Phi[,,1] <- matrix(c(.5,-.4,.3,.7),2,2)
p <- dim(Phi)[3]
Theta <- array(NaN,c(n,n,1))
Theta[,,1] <- 0*(-matrix(c(2,1,0,.5),2,2))
q <- dim(Theta)[3]
Mu <- rep(0,n)
C <- matrix(c(1,-1,2,1),2,2)
Model <- list(
Mu = Mu,
Phi = Phi,
Theta = Theta,
C = C,
distri = distri
)
Y0 <- rep(0,n)
eta0 <- c(1,0)
res.sim.1C <- simul.VARMA(Model,nb.sim,Y0,eta0,indic.IRF=1)
n <- dim(Model$Phi)[1]
p <- dim(Model$Phi)[3]
if(is.matrix(Model$Theta)==1){
q <- 1
}else{
q <- dim(Model$Theta)[3]
}
MU <- c(Model$Mu,rep(0,n*(p-1)))
PHI <- make.PHI2(Model$Phi)
THETA <- cbind(diag(n),-matrix(Model$Theta,nrow=n))
THETA <- rbind(THETA,matrix(0,n*(p-1),n*(q+1)))
CC <- diag(q+1) %x% Model$C
CC
y <- Y0
eta <- eta0
if(indic.IRF==1){
eta.simul <- matrix(0,nb.sim,n)
eta <- 0*eta
MU <- 0*MU
}else{
eta.simul <- simul.distri(Model$distri,nb.sim)
}
indic.IRF=1
y <- Y0
eta <- eta0
if(indic.IRF==1){
eta.simul <- matrix(0,nb.sim,n)
eta <- 0*eta
MU <- 0*MU
}else{
eta.simul <- simul.distri(Model$distri,nb.sim)
}
eta.simul[1,] <- eta0[1:n]
Y <- NULL
EPS <- NULL
V <- NULL
ETA <- NULL
for(t in 1:nb.sim){
eta <- c(eta.simul[t,],eta[1:(n*q)])
eps <- CC %*% eta
v <- THETA %*% eps
y <- MU + PHI %*% y + v
Y <- cbind(Y,y)
ETA <- cbind(ETA,eta)
EPS <- cbind(EPS,eps)
V <- cbind(V,v)
}
CC
q
y <- Y0
eta <- eta0
if(indic.IRF==1){
eta.simul <- matrix(0,nb.sim,n)
eta <- 0*eta
MU <- 0*MU
}else{
eta.simul <- simul.distri(Model$distri,nb.sim)
}
eta.simul[1,] <- eta0[1:n]
Y <- NULL
EPS <- NULL
V <- NULL
ETA <- NULL
eta.simul
c(eta.simul[t,],eta[1:(n*q)])
n <- dim(Model$Phi)[1]
p <- dim(Model$Phi)[3]
if(is.matrix(Model$Theta)==1){
q <- 1
}else{
q <- dim(Model$Theta)[3]
}
MU <- c(Model$Mu,rep(0,n*(p-1)))
PHI <- make.PHI2(Model$Phi)
THETA <- cbind(diag(n),-matrix(Model$Theta,nrow=n))
THETA <- rbind(THETA,matrix(0,n*(p-1),n*(q+1)))
CC <- diag(q+1) %x% Model$C
y <- Y0
eta <- eta0
if(indic.IRF==1){
eta.simul <- matrix(0,nb.sim,n)
eta <- 0*eta
MU <- 0*MU
}else{
eta.simul <- simul.distri(Model$distri,nb.sim)
}
eta.simul[1,] <- eta0[1:n]
Y <- NULL
EPS <- NULL
V <- NULL
ETA <- NULL
eta <- c(eta.simul[t,],eta[1:(n*q)])
eta
n
q
Model$Phi
library(AEC)
nb.sim <- 12
n <- 2
Phi <- array(NaN,c(n,n,1))
Phi[,,1] <- matrix(c(.5,-.4,.3,.7),2,2)
p <- dim(Phi)[3]
Theta <- array(NaN,c(n,n,1))
Theta[,,1] <- 0*(-matrix(c(2,1,0,.5),2,2))
q <- dim(Theta)[3]
Mu <- rep(0,n)
C <- matrix(c(1,-1,2,1),2,2)
Model <- list(
Mu = Mu,
Phi = Phi,
Theta = Theta,
C = C,
distri = distri
)
Y0 <- rep(0,n)
eta0 <- c(1,0)
res.sim.1C <- simul.VARMA(Model,nb.sim,Y0,eta0,indic.IRF=1)
eta0 <- c(0,1)
res.sim.2C <- simul.VARMA(Model,nb.sim,Y0,eta0,indic.IRF=1)
theta.angle <- pi/3
Q <- matrix(c(cos(theta.angle),sin(theta.angle),-sin(theta.angle),cos(theta.angle)),2,2)
Model$C <- C %*% Q
Y0 <- rep(0,n)
eta0 <- c(1,0)
res.sim.1CQ <- simul.VARMA(Model,nb.sim,Y0,eta0,indic.IRF=1)
eta0 <- c(0,1)
res.sim.2CQ <- simul.VARMA(Model,nb.sim,Y0,eta0,indic.IRF=1)
par(plt=c(.1,.95,.25,.8))
par(mfrow=c(2,2))
plot(res.sim.1C$Y[1,],las=1,
ylim=c(-1.5,3),
type="b",lwd=2,xlab="",ylab="",
main=expression(paste("Response of ",y[1,"*,*",t]," to a one-unit increase in ",eta[1],sep="")))
lines(res.sim.1CQ$Y[1,],col="red",type="b",lwd=2,pch=0)
abline(h=0,col="grey",lty=3)
legend("topright",
c(expression(paste(epsilon[t]," = ",B,eta[t],sep="")),
expression(paste(epsilon[t]," = ",BQ,eta[t],sep=""))),
lty=c(1,1), # gives the legend appropriate symbols (lines)
lwd=c(3,3), # line width
pch=c(21,22),
pt.bg = "white",
col=c("black","red"),
seg.len=4,
cex=1.3,bg="white",title="Model:")
plot(res.sim.2C$Y[1,],las=1,
ylim=c(-1.5,3),
type="b",lwd=2,xlab="",ylab="",
main=expression(paste("Response of ",y[1,"*,*",t]," to a one-unit increase in ",eta[2],sep="")))
lines(res.sim.2CQ$Y[1,],col="red",type="b",lwd=2,pch=0)
abline(h=0,col="grey",lty=3)
plot(res.sim.1C$Y[2,],las=1,
ylim=c(-1.5,2),
type="b",lwd=2,xlab="",ylab="",
main=expression(paste("Response of ",y[2,"*,*",t]," to a one-unit increase in ",eta[1],sep="")))
lines(res.sim.1CQ$Y[2,],col="red",type="b",lwd=2,pch=0)
abline(h=0,col="grey",lty=3)
plot(res.sim.2C$Y[2,],las=1,
ylim=c(-1.5,2),
type="b",lwd=2,xlab="",ylab="",
main=expression(paste("Response of ",y[2,"*,*",t]," to a one-unit increase in ",eta[2],sep="")))
lines(res.sim.2CQ$Y[2,],col="red",type="b",lwd=2,pch=0)
abline(h=0,col="grey",lty=3)
library(AEC)
nb.sim <- 12
n <- 2
Phi <- array(NaN,c(n,n,1))
Phi[,,1] <- matrix(c(.5,-.4,.3,.7),2,2)
p <- dim(Phi)[3]
Theta <- array(NaN,c(n,n,1))
Theta[,,1] <- 0*(-matrix(c(2,1,0,.5),2,2))
q <- dim(Theta)[3]
Mu <- rep(0,n)
C <- matrix(c(1,-1,2,1),2,2)
Model <- list(
Mu = Mu,
Phi = Phi,
Theta = Theta,
C = C,
distri = distri
)
Y0 <- rep(0,n)
eta0 <- c(1,0)
res.sim.1C <- simul.VARMA(Model,nb.sim,Y0,eta0,indic.IRF=1)
eta0 <- c(0,1)
res.sim.2C <- simul.VARMA(Model,nb.sim,Y0,eta0,indic.IRF=1)
theta.angle <- pi/3
Q <- matrix(c(cos(theta.angle),sin(theta.angle),-sin(theta.angle),cos(theta.angle)),2,2)
Model$C <- C %*% Q
Y0 <- rep(0,n)
eta0 <- c(1,0)
res.sim.1CQ <- simul.VARMA(Model,nb.sim,Y0,eta0,indic.IRF=1)
eta0 <- c(0,1)
res.sim.2CQ <- simul.VARMA(Model,nb.sim,Y0,eta0,indic.IRF=1)
par(plt=c(.1,.95,.25,.8))
par(mfrow=c(2,2))
plot(res.sim.1C$Y[1,],las=1,
ylim=c(-1.5,3),
type="b",lwd=2,xlab="",ylab="",
main=expression(paste("Response of ",y[1,"*,*",t]," to a one-unit increase in ",eta[1],sep="")))
lines(res.sim.1CQ$Y[1,],col="red",type="b",lwd=2,pch=0)
abline(h=0,col="grey",lty=3)
legend("topright",
c(expression(paste(epsilon[t]," = ",B,eta[t],sep="")),
expression(paste(epsilon[t]," = ",BQ,eta[t],sep=""))),
lty=c(1,1), # gives the legend appropriate symbols (lines)
lwd=c(3,3), # line width
pch=c(21,22),
pt.bg = "white",
col=c("black","red"),
seg.len=4,
cex=1.3,bg="white",title="Model:")
plot(res.sim.2C$Y[1,],las=1,
ylim=c(-1.5,3),
type="b",lwd=2,xlab="",ylab="",
main=expression(paste("Response of ",y[1,"*,*",t]," to a one-unit increase in ",eta[2],sep="")))
lines(res.sim.2CQ$Y[1,],col="red",type="b",lwd=2,pch=0)
abline(h=0,col="grey",lty=3)
plot(res.sim.1C$Y[2,],las=1,
ylim=c(-1.5,2),
type="b",lwd=2,xlab="",ylab="",
main=expression(paste("Response of ",y[2,"*,*",t]," to a one-unit increase in ",eta[1],sep="")))
lines(res.sim.1CQ$Y[2,],col="red",type="b",lwd=2,pch=0)
abline(h=0,col="grey",lty=3)
plot(res.sim.2C$Y[2,],las=1,
ylim=c(-1.5,2),
type="b",lwd=2,xlab="",ylab="",
main=expression(paste("Response of ",y[2,"*,*",t]," to a one-unit increase in ",eta[2],sep="")))
lines(res.sim.2CQ$Y[2,],col="red",type="b",lwd=2,pch=0)
abline(h=0,col="grey",lty=3)
library(AEC)
plot(US3var[,1])
plot(US3var[,2])
plot(US3var[,3])
plot(US3var[,4])
plot(US3var[,5])
plot(US3var[,3])
names(US3var)
library(devtools)
install_github("jrenne/AEC")
install_github("jrenne/AEC")
library(AEC)
US3var$infl
plot(US3var$infl)
?replicate
replicate(bootstrap.replications,diag(n), simplify="array")
replicate(bootstrap.replications,diag(3), simplify="array")
replicate(3,diag(3), simplify="array")
library(BVAR)
install.packages("BVAR")
library(BVAR)
dim(fred_md)
names(fred_md)
names(fred_md)[1]
?fred_md
toBibtex("BVAR")
toBibtex(BVAR)
toBibtex(citation("BVAR"))
names(fred_md)
sum(names(fred_md)=="LHU680")
sum(names(fred_md)=="IPP")
# Load vars package:
library(vars)
library(AEC)
data("USmonthly")
# Make use of Ramey data
First.date <- "1990-05-01"
Last.date <- "2012-6-01"
indic.first <- which(USmonthly$DATES==First.date)
indic.last  <- which(USmonthly$DATES==Last.date)
USmonthly   <- USmonthly[indic.first:indic.last,]
shock.name <- "RRSHOCK"
shock.name <- "FF4_TC"
#shock.name <- "ED2_TC"
#shock.name <- "ff1_vr"
#shock.name <- "rrshock83b"
indic.shock.name <- which(names(USmonthly)==shock.name)
Z <- matrix(USmonthly[,indic.shock.name],ncol=1)
plot(USmonthly$DATES,Z,type="l")
considered.variables <- c("GS1","LIP","LCPI","EBP")
y <- NULL
for(var in considered.variables){
indic.var <- which(names(USmonthly)==var)
y <- cbind(y,USmonthly[,indic.var])
}
n <- dim(y)[2]
colnames(y) <- considered.variables
nb.periods.IRF <- 20
# ===============================
# SVAR-IV approach:
# ===============================
nb.bootstrap.replications <- 200
p <- 4
res.svar.iv <- svar.iv(y,Z,p,
names.of.variables=considered.variables,
nb.periods.IRF = nb.periods.IRF,
z.AR.order=1, # This is used in the parametric bootstrap only
nb.bootstrap.replications, # This is used in the parametric bootstrap only
confidence.interval = 0.90, # This is used in the parametric bootstrap only
indic.plot=1)
# ===============================
# LP-IV approach:
# ===============================
res.LP.IV <- make.LPIV.irf(y,Z,
nb.periods.IRF = nb.periods.IRF,
nb.lags.Y.4.control=4,
nb.lags.Z.4.control=4,
indic.plot = 1, # Plots are displayed if = 1.
confidence.interval = 0.90)
